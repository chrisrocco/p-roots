import ruleOfSigns from "./descarte";
import rationalZeros from "./zeros";
import syntheticDivide from "./syntheticDivision";
import quadraticFormula from "./quadraticFormula";
import * as math from "mathjs";
/*

    1.  If solving an equation, put it in **standard form** with 0 on one side and **simplify**.

    2.  Know **how many roots** to expect.

    3.  If you’re down to a **linear or quadratic equation** (degree 1 or 2), solve by inspection or the quadratic formula.
        Then go to step 7.

    4.  **Find one rational factor** or root. This is the hard part, but there are lots of techniques to help you.
        If you can find a factor or root, continue with step 5 below; if you can’t, go to step 6.

    5.  **Divide by your factor**. This leaves you with a new **reduced polynomial** whose degree is 1 less.
        For the rest of the problem, you’ll work with the reduced polynomial and not the original. Continue at step 3.

    6.  **If you can’t find a factor or root**, turn to numerical methods.
        Then go to step 7.

    7.  If this was an equation to solve, **write down the roots**. If it was a polynomial to factor, **write it in factored form**, including any constant factors you took out in step 1.

*/
export default function reduce(polynomial, options) {
    if (options === void 0) { options = { quadraticFormula: false }; }
    var steps = [];
    var roots = [];
    steps.push({
        "module": "descarte",
        "title": "Rule of Signs",
        "desc": "Apply Descarte's 'Rule of Signs' so we know how many positive and negative zeros to expect",
        "data": ruleOfSigns(polynomial)
    });
    var stopAtDegree = 1;
    if (options.quadraticFormula)
        stopAtDegree = 3;
    var curr = polynomial;
    while (curr.highestDegree() >= stopAtDegree) {
        var zeros = rationalZeros(curr);
        if (zeros.actual_zeros.length === 0) {
            steps.push({
                "module": "no_zeros",
                "title": "No Zeros Found!"
            });
            break;
        }
        var nextZero = zeros.actual_zeros[0];
        // POTENTIAL LOSS OF PRECISION - HAVE SOMEONE VERIFY THIS
        var divisor = math.number(nextZero);
        var division = syntheticDivide(curr, divisor);
        var result = division.polynomial;
        if (result.highestDegree() >= curr.highestDegree()) {
            steps.push({
                "module": "no_divide",
                "title": "Could not divide polynomial!",
                "data": division
            });
            break;
        }
        curr = division.polynomial;
        steps.push({
            "module": "zeros",
            "title": "Rational Zeros Test",
            "data": zeros
        });
        steps.push({
            "module": "synthetic_division",
            "title": "Synthetic Division",
            "data": division
        });
        roots.push(nextZero);
        console.log("curr", curr.monomials);
    }
    if (options.quadraticFormula) {
        var quadratic = quadraticFormula(curr);
        steps.push({
            "module": "quadraticFormula",
            "title": "Quadratic Formula",
            "data": quadratic
        });
        steps.push({
            "module": "final",
            "title": "Result",
            "data": curr
        });
        roots.push(math.fraction(quadratic.plus));
        roots.push(math.fraction(quadratic.minus));
    }
    return { steps: steps, roots: roots };
}
//# sourceMappingURL=reduce.js.map